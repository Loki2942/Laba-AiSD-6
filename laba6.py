'''
Задание состоит из двух частей.
1 часть – написать программу в соответствии со своим вариантом задания.
2 часть – усложнить написанную программу, введя по своему усмотрению в условие минимум одно
ограничение на характеристики объектов и целевую функцию для оптимизации решения.

Вариант 16. На плоскости задано К точек. Сформировать все возможные варианты выбора множества точек
из них для формирования всех возможных треугольников.
'''


import re
import random
from math import *


# составляем все возможные сочетания точек
def combinations(lst, k):
    if k == 0:
        return [[]]
    res = []
    for i in range(len(lst)):
        elem = lst[i]
        rest = lst[i+1:]
        for j in combinations(rest, k-1):
            res.append([elem] + j)
    return res

# для вычисления периметра треугольника
def L(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

try:
    a = int(input('Запустить обычную версию программы или усложнённую? ( Обычную = 0 | Усложнённую = 1 ): '))
    while a != 0 and a != 1:
        a = int(input('Принимаются только значения "0" и "1": '))

    z = int(input("Введите количество точек (число должно быть больше или равно 3): "))
    while z < 3:  # ошибка в случае введения слишком малого числа
        z = int(input("Вы ввели число, неподходящее по условию, введите число K, большее или равное 3: "))

    n = 25  # это число задаёт диапазон для функции рандом

    # Первая часть задания
    if a == 0 :
        pairs = []
        s = 0  # индикатор заполнения

        while s != z:
            # генерируем два случайных числа и добавляем их в список в виде кортежа
            x = random.randint(0, n)
            y = random.randint(0, n)
            if not (x, y) in pairs:  # защита от одинаковых точек
                pairs.append((x, y))
                s += 1

        print(" \n Кординаты точек", pairs)

        m = []
        for j in combinations(pairs, 3): # составляем комбинаци  z по 3
            m.append(j)

        print('\nКоординаты точек возможных треугольников:')
        for i in m:
            print(' Точка № 1: {}, Точка № 2: {}, Точка № 3: {}\n'.format(*i))


    # Вторая часть задания
    if a == 1:
        print("\nВ усложненной программе необходимо чтобы сумма координат точки была кратна трём,\n"
              "затем рассчитать периметр треугольника по координатам,\n"
              "периметр самого большого треугольника, вывести в консоль.\n")
        pairs = []
        s = 0 # индикатор заполнения
        while s != z:
            # генерируем два случайных числа и добавляем их в список в виде кортежа
            x = random.randint(0, n)
            y = random.randint(0, n)
            # ограничение на характеристики объектов
            if (x+y)%3 == 0 :
                if not (x,y) in pairs : # защита от одинаковых точек
                    pairs.append((x, y))
                    s +=1
        print(" \n Кординаты точек", pairs)

        m = []
        for j in combinations(pairs, 3): # составляем комбинаци  z по 3
            m.append(j)
        print('\nКоординаты точек возможных треугольников:')

        max_perimeter = []
        for i in m:
            print(' Точка № 1: {}, Точка № 2: {}, Точка № 3: {}\n'.format(*i))
            i = str(i)
            # ищем в списке i координаты
            x, y = list(map(list, zip(*[list(map(int, pair)) for pair in re.findall(r"\((\d+)\s*,\s*(\d+)\)", i)])))
            # перезапись для формулы
            x1,x2,x3 = x[0],x[1],x[2]
            y1, y2, y3 = y[0], y[1], y[2]
            # вычисляем периметр
            perimeter = round(L(x1, y1, x2, y2) + L(x2, y2, x3, y3) + L(x3, y3, x1, y1))
            max_perimeter.append(perimeter)
        # вывод
        print("Периметр самого большого треугольника: ", max(max_perimeter),"\n")

except ValueError:
    print('\nВы ввели что-то не то, перезапустите программу и следуйте указаниям .')
