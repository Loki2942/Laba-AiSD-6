'''
Задание состоит из двух частей.
1 часть – написать программу в соответствии со своим вариантом задания.
2 часть – усложнить написанную программу, введя по своему усмотрению в условие минимум одно
ограничение на характеристики объектов и целевую функцию для оптимизации решения.

Вариант 16. На плоскости задано К точек. Сформировать все возможные варианты выбора множества точек
из них для формирования всех возможных треугольников.
'''


import re
import random
import itertools
from math import *


def L(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


k = int(input("Введите количество точек (число должно быть больше или равно 3): "))
while k < 3:        # ошибка в случае введения слишком малого порядка матрицы
         k = int(input("Вы ввели число, неподходящее по условию, введите число K, большее или равное 3: "))


n = int(input("Введите размерность плоскости XOY (значение должно быть целым положительным числом): "))
while n < k-1:        # ошибка в случае введения слишком малого порядка матрицы
         n = int(input("Размерность плоскости слишком мала, чтобы разместить на ней всей точки, введите число побольше: "))


try:
    a = int(input('Запустить обычную версию программы или усложнённую? ( Обычную = 0 | Усложнённую = 1 ): '))
    while a != 0 and a != 1:
        a = int(input('Принимаются только значения "0" и "1": '))

    if a == 0 :
        pairs = []
        s = 0  # индикатор заполнения

        while s != k:
            # генерируем два случайных числа и добавляем их в список в виде кортежа
            x = random.randint(0, n)
            y = random.randint(0, n)
            if not (x, y) in pairs:  # защита от одинаковых точек
                pairs.append((x, y))
                s += 1

        print(" \n Кординаты точек", pairs)

        m = []
        for i in itertools.combinations(pairs, 3):
            m.append(i)
        print('\nКоординаты точек возможных треугольников:')
        for i in m:
            print(' Точка № 1: {}, Точка № 2: {}, Точка № 3: {}\n'.format(*i))


    # Вторая часть задания
    if a == 1:
        print("\nВ усложненной программе необходимо рассчитать периметр треугольника по координатам,"
              "\nи если он окажется четным, вывести сообщение об этом в консоль.'\n")

        pairs = []
        s = 0 # индикатор заполнения
        while s != k:
            # генерируем два случайных числа и добавляем их в список в виде кортежа
            x = random.randint(0, n)
            y = random.randint(0, n)
            if not (x,y) in pairs : # защита от одинаковых точек
                pairs.append((x, y))
                s +=1

        print(" \n Кординаты точек", pairs)

        m = []
        for i in itertools.combinations(pairs, 3):
            m.append(i)
        print('\nКоординаты точек возможных треугольников:')

        for i in m:
            print(' Точка № 1: {}, Точка № 2: {}, Точка № 3: {}\n'.format(*i))

            i = str(i)
            # ищем в списке i координаты
            x, y = list(map(list, zip(*[list(map(int, pair)) for pair in re.findall(r"\((\d+)\s*,\s*(\d+)\)", i)])))

            # перезапись для формулы
            x1,x2,x3 = x[0],x[1],x[2]
            y1, y2, y3 = y[0], y[1], y[2]

            # вычисляем периметр
            perimeter = round(L(x1, y1, x2, y2) + L(x2, y2, x3, y3) + L(x3, y3, x1, y1))

            # вывод
            if perimeter % 2 == 0:
                print(" Ого! Периметр этого треугольника четное число, а именно: ", perimeter,"\n")

except ValueError:
    print('\nВы ввели что-то не то, перезапустите программу и следуйте указаниям .')